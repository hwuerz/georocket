plugins {
    id "de.undercouch.download" version "3.4.2"
}

apply plugin: 'java'
apply plugin: 'antlr'
apply plugin: 'maven'
apply plugin: 'checkstyle'
apply plugin: 'de.undercouch.download'

repositories {
    jcenter()
    exclusiveContent {
        forRepository {
            maven {
                url 'https://repo.osgeo.org/repository/release/'
            }
        }
        filter {
            includeGroup "jgridshift"
            includeGroup "org.geotools"
        }
    }
}

dependencies {
    compile project(':georocket-common-api')
    compile project(':georocket-server-api')

    compile "io.vertx:vertx-core:$vertxVersion"
    compile "io.vertx:vertx-rx-java:$vertxVersion"

    compile 'com.fasterxml:aalto-xml:1.0.0'
    compile 'com.google.guava:guava:23.6-jre'
    compile 'de.undercouch:actson:1.2.0'
    compile 'org.apache.commons:commons-lang3:3.7'
    compile 'org.apache.commons:commons-exec:1.3'
    compile 'org.apache.commons:commons-text:1.3'

    compile('org.geotools:gt-epsg-extension:19.1') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    compile('org.geotools:gt-epsg-hsql:19.1') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    compile('org.geotools:gt-referencing:19.1') {
        // exclude invalid dependency
        exclude group: 'javax.media', module: 'jai_core'
    }
    // replace invalid jai_core dependency by a valid one
    compile 'javax.media.jai:com.springsource.javax.media.jai.core:1.1.3'

    testCompile 'junit:junit:4.12'
    testCompile "io.vertx:vertx-unit:$vertxVersion"

    antlr 'org.antlr:antlr4:4.5.3'
}

ext {
    lastoolsUrl = new File(sourceSets.main.resources.srcDirs.first(),
            "lastools_download_url.txt").text
    lastoolsArchiveName = new File(new URL(lastoolsUrl).path).name
    lastoolsInstallDir = new File(projectDir, "/")
}

/**
 * Download LAStools to the build directory
 */
task downloadLastools {
    doLast {
        // if the destination file does not exist yet, download Lastools
        // to a temporary file and then rename it
        def destFile = new File(buildDir, lastoolsArchiveName)
        if (!destFile.exists()) {
            logger.info("Download LAStools archive...")
            def tempFile = new File(buildDir, "${lastoolsArchiveName}.part")
            for (int i = 0; i < 5; ++i) {
                try {
                    download {
                        src lastoolsUrl
                        dest tempFile
                        overwrite true
                    }
                    break
                } catch (Exception e) {
                    if (i == 4) {
                        throw e
                    }
                    logger.warn("Download failed. Retrying in 5 seconds ...")
                    Thread.sleep(5000)
                }
            }
            tempFile.renameTo(destFile)
        }
    }
}

task extractLastools(dependsOn: downloadLastools, type: Copy) {
    def indicatorFile = new File(lastoolsInstallDir, "LAStools/README.txt")
    if (indicatorFile.exists()) {
        return
    }
    from zipTree(new File(buildDir, lastoolsArchiveName))
    into lastoolsInstallDir
}

task makeLastools(type:Exec) {
    workingDir new File(lastoolsInstallDir, "LAStools/")
    commandLine 'make'

    standardOutput = new ByteArrayOutputStream()
    ext.output = {
        return standardOutput.toString()
    }
}

import org.apache.tools.ant.taskdefs.condition.Os
if (!Os.isFamily(Os.FAMILY_WINDOWS) && !new File(lastoolsInstallDir, "LAStools/bin/lasmerge").exists() ) {
    // Make binaries if we are not on windows. Only windows binaries are included in the download.
    // Skip make if the binary already exists.
    extractLastools.finalizedBy makeLastools
}

task cleanExtractedLastools(type: Delete) {
    delete 'lastools'
}

processResources.dependsOn(extractLastools)
eclipseClasspath.dependsOn(extractLastools)

clean.dependsOn(cleanExtractedLastools)

task generateVersionFile {
    doLast {
        def dst = new File(project.buildDir, 'generated-src/main/resources/io/georocket')
        dst.mkdirs()
        def versionFile = new File(dst, 'version.dat')
        versionFile.withWriter { w ->
            w << project.version
        }
    }
}

task generateSources(dependsOn: generateVersionFile)

processResources.dependsOn(generateSources)
eclipseClasspath.dependsOn(generateSources)
eclipseClasspath.dependsOn(generateGrammarSource)

// include generated sources
sourceSets.main.java.srcDirs "$buildDir/generated-src/main/java"
sourceSets.main.resources.srcDirs "$buildDir/generated-src/main/resources"
